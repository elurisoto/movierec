function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-May-2015 14:42:49.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [1.7;2.1;1.6];
  x1_step1_gain = [0.285714285714286;0.833333333333333;0.25974025974026];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [0.021163953393801091668;0.021050703571703119343;0.021309611570988457041;0.021301217602517991123;-0.021204456533703092136;-0.72327480923090670117;-0.27490354211028544817;0.021126104987260627133;-0.021277456447336626222;0.0175719960016995011];
  IW1_1 = [0.054820982790663337625 -0.0029393170503183409584 0.052547752107315971737;0.054499611734443099975 -0.0029063116012162247721 0.052246196210558169815;0.055235098783849620463 -0.0029822331534726334058 0.052936167667463680797;0.055211210188002068922 -0.0029797456717313738732 0.052913766745083613829;-0.054936047551007470557 0.0029511979274805394402 -0.052655694726858492949;0.229197543370845358 0.34808433398249810642 0.84244959987589973505;-0.038895640514499355 -0.65860144607979909104 0.093505848140986183581;0.054713521038292328713 -0.0029282514743616187662 0.052446928804950415648;-0.055143603700938521872 0.0029727137772650926578 -0.052850367077311555253;0.044860294822064022968 -0.0020325571966894220681 0.043151661911164387875];
  
  % Layer 2
  b2 = 0.28125248398712121567;
  LW2_1 = [0.079308152164014350527 0.078845433914990159519 0.07990434399313671443 0.079869954152279390436 -0.079473814989826419009 1.0099360537170467556 0.45146386028555701708 0.079153430720390396957 -0.079772627078412247648 0.064948322453974624557];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 0.444444444444444;
  y1_step1_xoffset = 0.5;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
